"""This module provides a utility class for uploading files to a Github repository."""
import os
import datetime
import re
import shutil
from github import Github
from git import Repo


class GithubUploader:
    """This class provides methods to upload files to a Github repository."""

    def __init__(self, directory, repo_url, access_token):
        self.directory = directory
        self.repo_url = repo_url
        self.access_token = access_token

        # Extract owner and repo_name from repo_url
        pattern = r'https://github.com/([^/]+)/([^/]+).git'
        match = re.match(pattern, self.repo_url)
        if match:
            self.owner = match.group(1)
            self.repo_name = match.group(2)
        else:
            raise ValueError('Invalid repo URL')

        self.repo_dir = os.path.join(os.getcwd(), self.repo_name)

        # Check if repo directory exists
        if not os.path.isdir(self.repo_dir):
            self.clone_repo()

        # Initialize Repo object
        self.repo = Repo(self.repo_dir)

        # Initialize Github instance
        self.g = Github(self.access_token)

        # Get the repository object
        self.github_repo = self.g.get_repo(f'{self.owner}/{self.repo_name}')

    def clone_repo(self):
        """Clone the repository to the local directory."""
        # Use the access token in the repo URL (Note: be cautious with token security)
        token_repo_url = self.repo_url.replace(
            'https://', f'https://{self.access_token}@')
        Repo.clone_from(token_repo_url, self.repo_dir)

    def upload(self):
        """Upload the files to the Github repository."""
        # Create a new branch
        branch_name = 'upload-' + datetime.datetime.now().strftime('%Y%m%d%H%M%S')

        repo = self.repo

        # Checkout main branch and pull latest changes
        main_branch = 'main'
        repo.git.checkout(main_branch)
        repo.remotes.origin.pull()

        # Create new branch
        new_branch = repo.create_head(branch_name)
        new_branch.checkout()

        # Copy the entire directory into the repo_dir
        directory_name = os.path.basename(os.path.normpath(self.directory))
        dst_dir = os.path.join(self.repo_dir, directory_name)

        # If destination directory exists, remove it
        if os.path.exists(dst_dir):
            shutil.rmtree(dst_dir)

        shutil.copytree(self.directory, dst_dir)

        # Add all changes
        repo.git.add(A=True)

        # Check if there are changes to commit
        if repo.is_dirty(untracked_files=True):
            # Commit changes
            commit_message = 'Automated commit of new images'
            repo.index.commit(commit_message)

            # Push new branch to remote
            # Use the access token in the remote URL to authenticate
            # Set up remote with token
            origin = repo.remotes.origin
            # Backup the original URL
            original_url = origin.url
            token_repo_url = self.repo_url.replace(
                'https://', f'https://{self.access_token}@')
            origin.set_url(token_repo_url)

            try:
                origin.push(refspec=f'{branch_name}:{branch_name}')
            finally:
                # Reset the remote URL back to the original one
                origin.set_url(original_url)

            # Create pull request
            pr_title = 'Automated PR - ' + branch_name
            pr_body = 'This PR was automatically generated by GithubUploader.'

            pr = self.github_repo.create_pull(
                title=pr_title, body=pr_body, head=branch_name, base=main_branch)

            # Merge the PR
            pr.merge()

            # Checkout back to main
            repo.git.checkout(main_branch)

            # Delete the branch locally
            repo.git.branch('-D', branch_name)

            # Delete the branch remotely
            origin.push(refspec=f':{branch_name}')
        else:
            print('No changes to commit.')
